@page "/user/{username}"
@inject HttpClient client
@inject IJSRuntime js
@inject NavigationManager uriHeler

<h3>Users</h3>
<a href="/@username">Back</a>
<br>
<SearchForm ButtonText="Search" searchModel="@_searchModel" OnValidSubmit="@Search"></SearchForm>
@if (users == null)
{
    <text>Search for a User</text>
}
else if (users.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Username</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (UserComplete uC in users)
            {
                
                {
                     u = uC.user;
                }
                <tr>
                    <td>u.username</td>
                    <td>u.first_name</td>
                    <td>u.last_name</td>
                    <td>u.email</td>
                    <td>u.last_access_date</td>
                    <td>
                        @if (uC.isFollowed )
                        {
                            <button class="btn btn-danger" @onclick="@(() => UnFollow(uC.user.username))">Follow</button>
                        }
                        else
                        {
                            <button class="btn btn-danger" @onclick="@(() => Follow(uC.user.username))">Follow</button>  
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    [Parameter] public string username { get; set; }
    SearchModel _searchModel = new SearchModel();
    UserComplete[] users { get; set; }
    User u { get; set; }
    protected override async Task OnInitializedAsync()
    {
        //users = await client.GetJsonAsync<User[]>("api/user");
    }

    async Task Search()
    {
        //var search_type = "user";
        users = await client.GetJsonAsync<UserComplete[]>($"api/search/{_searchModel.SearchString}/{username}");
        
    }
    async Task Follow(string followee)
    {
        await client.PostJsonAsync($"api/follower/{followee}/{this.username}", username);
        
        
    }

    async Task UnFollow(string followee)
    {
        await client.DeleteAsync($"api/follower/{followee}/{this.username}");
    }

    async Task<bool> isFollowingAsync(string followee)
    {
        return  await client.GetJsonAsync<bool>($"api/follower/{followee}/{this.username}");
    }

}