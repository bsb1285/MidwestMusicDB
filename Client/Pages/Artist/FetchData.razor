@page "/Artist/{username}"
@using System.ComponentModel


@inject HttpClient client
@inject IJSRuntime js
@inject NavigationManager uriHelper

<h3>Songs on Album List</h3>

<SearchForm ButtonText="Search" searchModel="@_searchModel" OnValidSubmit="@Search"></SearchForm>
<div>
   
</div>

@if (songs == null)
{
    <text>Loading ...</text>
}
else if (songs.Length == 0)
{
    <text>Search for a song</text>
}
else
{
    
    
    
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Title</th>
            <th>Duration</th>
            <th>Release Date</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var s in songs)
        {
            <tr>
                <td>@s.title</td>
                <td>@s.length</td>
                <td>@s.song_release_date</td>
                <td>
                    <a class="btn btn-success" href="playlists/@username/@s.title/add">Add To playlist</a>
                    <button class="btn btn-success" @onclick="@(() => Listen(s.title))">Listen</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
    
}
@code {
    [Parameter]
    public string username { get; set; }

    SearchModel _searchModel = new SearchModel();
    public string SearchString { get; set; }

    
    
    
    Song[] songs { get; set; }
    protected override async Task OnInitializedAsync()
    {
    //songs = await client.GetJsonAsync<Song[]>("api/search");
    }

    async Task Search()
    {
        var search_type = "artist";
        Console.WriteLine($"SearchString: {_searchModel.SearchString}");
        songs = await client.GetJsonAsync<Song[]>($"api/search/{_searchModel.SearchString}/{search_type}");
        Console.WriteLine("Done Search");
        uriHelper.NavigateTo($"Artist/{username}");
    }

    async Task Listen(string title)
    {
        await client.PutJsonAsync($"api/song/listen/{username}/{title}", title);
    }
}